--!strict
local testing = zune.testing;

local test = testing.test;
local expect = testing.expect;
local describe = testing.describe;

local mem = require("@std/mem");

describe("sliceOwned", function()
    test("Example", function()
        local b = buffer.fromstring("Hello")
        local slice = mem.sliceOwned(b, 2, 2)
        expect(buffer.tostring(slice)).toBe("ll")
    end)
    test("None", function()
        local b = buffer.create(0)
        local slice = mem.sliceOwned(b, 0, 0)
        expect(buffer.len(slice)).toBe(0)
    end)
    test("Single", function()
        local b = buffer.fromstring("H")
        local slice = mem.sliceOwned(b, 0, 1)
        expect(buffer.tostring(slice)).toBe("H")
    end)
    test("One", function()
        local b = buffer.fromstring("Hello")
        local slice = mem.sliceOwned(b, 0, 1)
        expect(buffer.tostring(slice)).toBe("H")
    end)
    test("No Size", function()
        local b = buffer.fromstring("Hello")
        local slice = mem.sliceOwned(b, 1)
        expect(buffer.tostring(slice)).toBe("ello")
    end)
end)

describe("reverse", function()
    test("Example", function()
        local b = buffer.fromstring("Hello")
        mem.reverse(b, 0, 5)
        expect(buffer.tostring(b)).toBe("olleH")
    end)
    test("None", function()
        local b = buffer.create(0)
        mem.reverse(b, 0, 0)
        expect(buffer.len(b)).toBe(0)
    end)
    test("Single", function()
        local b = buffer.fromstring("H")
        mem.reverse(b, 0, 1)
        expect(buffer.tostring(b)).toBe("H")
    end)
end)

describe("joinOwned", function()
    test("Example", function()
        local b = {
            buffer.fromstring("Hello"),
            buffer.fromstring("World!")
        }
        local joined = mem.joinOwned(buffer.fromstring(", "), b)
        expect(buffer.tostring(joined)).toBe("Hello, World!")
    end)
    test("None", function()
        local b = {}
        local joined = mem.joinOwned(nil, b)
        expect(buffer.len(joined)).toBe(0)
    end)
    test("Single", function()
        local b = {
            buffer.fromstring("Hello")
        }
        local joined = mem.joinOwned(nil, b)
        expect(buffer.tostring(joined)).toBe("Hello")
    end)
    test("No separator", function()
        local b = {
            buffer.fromstring("Hello"),
            buffer.fromstring("World!")
        }
        local joined = mem.joinOwned(nil, b)
        expect(buffer.tostring(joined)).toBe("HelloWorld!")
    end)
end)

-- eql is based on eqlSlice
describe("eqlSlice", function()
    test("Example", function()
        local a = buffer.fromstring("  Hello")
        local b = buffer.fromstring("Hello")
        expect(mem.eqlSlice(a, 2, b, 0, 5)).toBe(true)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.eqlSlice(a, 0, b, 0)).toBe(true)
    end)
    test("Single", function()
        local a = buffer.fromstring(" H")
        local b = buffer.fromstring("H")
        expect(mem.eqlSlice(a, 1, b, 0, 1)).toBe(true)
    end)
    test("Large", function()
        local a = buffer.fromstring(string.rep(".", 50) .. string.rep("aB", 100))
        local b = buffer.fromstring(string.rep("aB", 100))
        expect(mem.eqlSlice(a, 50, b, 0, 100)).toBe(true)
    end)
    test("Different", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("World!")
        expect(mem.eqlSlice(a, 0, b, 0)).toBe(false)
    end)
    test("Different Length", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("Hello!")
        expect(mem.eqlSlice(a, 0, b, 0)).toBe(false)
    end)
    test("Different Single", function()
        local a = buffer.fromstring("H")
        local b = buffer.fromstring("W")
        expect(mem.eqlSlice(a, 0, b, 0)).toBe(false)
    end)
    test("Different Large", function()
        local a = buffer.fromstring(string.rep(".", 50) .. string.rep("aB", 100))
        local b = buffer.fromstring(string.rep("aC", 100))
        expect(mem.eqlSlice(a, 50, b, 0, 50)).toBe(false)
    end)
end)

describe("eql", function()
    test("Example", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("Hello")
        expect(mem.eql(a, b)).toBe(true)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.eql(a, b)).toBe(true)
    end)
    test("Single", function()
        local a = buffer.fromstring("H")
        local b = buffer.fromstring("H")
        expect(mem.eql(a, b)).toBe(true)
    end)
    test("Large", function()
        local a = buffer.fromstring(string.rep("aB", 100))
        local b = buffer.fromstring(string.rep("aB", 100))
        expect(mem.eql(a, b)).toBe(true)
    end)
    test("Different", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("World!")
        expect(mem.eql(a, b)).toBe(false)
    end)
    test("Different Length", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("Hello!")
        expect(mem.eql(a, b)).toBe(false)
    end)
    test("Different Single", function()
        local a = buffer.fromstring("H")
        local b = buffer.fromstring("W")
        expect(mem.eql(a, b)).toBe(false)
    end)
    test("Different Large", function()
        local a = buffer.fromstring(string.rep("aB", 100))
        local b = buffer.fromstring(string.rep("aC", 100))
        expect(mem.eql(a, b)).toBe(false)
    end)
end)

describe("startsWith", function()
    test("Example", function()
        local a = buffer.fromstring("Hat Hello")
        local b = buffer.fromstring("Hat")
        expect(mem.startsWith(a, b)).toBe(true)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.startsWith(a, b)).toBe(true)
    end)
    test("Single", function()
        local a = buffer.fromstring("H ")
        local b = buffer.fromstring("H")
        expect(mem.startsWith(a, b)).toBe(true)
    end)
    test("Large", function()
        local a = buffer.fromstring("Capped" .. string.rep("aB", 100))
        local b = buffer.fromstring("Capped")
        expect(mem.startsWith(a, b)).toBe(true)
    end)
    test("Different", function()
        local a = buffer.fromstring("Hollo  ")
        local b = buffer.fromstring("Hello")
        expect(mem.startsWith(a, b)).toBe(false)
    end)
    test("Different Length", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("Hello!")
        expect(mem.startsWith(a, b)).toBe(false)
    end)
    test("Different Single", function()
        local a = buffer.fromstring("H")
        local b = buffer.fromstring("W")
        expect(mem.startsWith(a, b)).toBe(false)
    end)
    test("Different Large", function()
        local a = buffer.fromstring("Red" .. string.rep("aB", 100))
        local b = buffer.fromstring("Rad")
        expect(mem.startsWith(a, b)).toBe(false)
    end)
end)

describe("endsWith", function()
    test("Example", function()
        local a = buffer.fromstring("Hello Hat")
        local b = buffer.fromstring("Hat")
        expect(mem.endsWith(a, b)).toBe(true)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.endsWith(a, b)).toBe(true)
    end)
    test("Single", function()
        local a = buffer.fromstring("  H")
        local b = buffer.fromstring("H")
        expect(mem.endsWith(a, b)).toBe(true)
    end)
    test("Large", function()
        local a = buffer.fromstring(string.rep("aB", 100) .. "Capped")
        local b = buffer.fromstring("Capped")
        expect(mem.endsWith(a, b)).toBe(true)
    end)
    test("Different", function()
        local a = buffer.fromstring("  Hollo")
        local b = buffer.fromstring("Hello")
        expect(mem.endsWith(a, b)).toBe(false)
    end)
    test("Different Length", function()
        local a = buffer.fromstring("Hello")
        local b = buffer.fromstring("Hello!")
        expect(mem.endsWith(a, b)).toBe(false)
    end)
    test("Different Single", function()
        local a = buffer.fromstring("H")
        local b = buffer.fromstring("W")
        expect(mem.endsWith(a, b)).toBe(false)
    end)
    test("Different Large", function()
        local a = buffer.fromstring(string.rep("aB", 100) .. "Red")
        local b = buffer.fromstring("Rad")
        expect(mem.endsWith(a, b)).toBe(false)
    end)
end)

-- indexOf is based on indexOfAt
describe("indexOfAt", function()
    test("Example", function()
        local a = buffer.fromstring("Hat Hello")
        local b = buffer.fromstring("Hello")
        expect(mem.indexOfAt(a, 0, b)).toBe(4)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.indexOfAt(a, 0, b)).toBe(0)
    end)
    test("None (2)", function()
        local a = buffer.create(0)
        local b = buffer.fromstring(" ")
        expect(mem.indexOfAt(a, 0, b)).toBe(nil)
    end)
    test("Single", function()
        local a = buffer.fromstring("H ")
        local b = buffer.fromstring("H")
        expect(mem.indexOfAt(a, 0, b)).toBe(0)
    end)
    test("Large", function()
        local a = buffer.fromstring(string.rep("aB", 100) .. "Capped" .. string.rep("aB", 100))
        local b = buffer.fromstring("Capped")
        expect(mem.indexOfAt(a, 0, b)).toBe(200)
    end)
    test("Offset", function()
        local a = buffer.fromstring(" H  ")
        local b = buffer.fromstring("H")
        expect(mem.indexOfAt(a, 1, b)).toBe(1)
    end)
    test("Different", function()
        local a = buffer.fromstring("Hollo  ")
        local b = buffer.fromstring("Hello")
        expect(mem.indexOfAt(a, 0, b)).toBe(nil)
    end)
end)

-- indexOfChar is based on indexOfCharAt
describe("indexOfCharAt", function()
    test("Example", function()
        local a = buffer.fromstring("Hat Hello")
        expect(mem.indexOfCharAt(a, 0, string.byte("H"))).toBe(0)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.indexOfCharAt(a, 0, 2)).toBe(nil)
    end)
    test("None (2)", function()
        local a = buffer.create(0)
        expect(mem.indexOfCharAt(a, 0, string.byte(" "))).toBe(nil)
    end)
end)

-- lastIndexOf is based on lastIndexOfAt
describe("lastIndexOfAt", function()
    test("Example", function()
        local a = buffer.fromstring("Hat Hello Hat")
        local b = buffer.fromstring("Hat")
        expect(mem.lastIndexOfAt(a, 0, b)).toBe(10)
    end)
    test("None", function()
        local a = buffer.create(0)
        local b = buffer.create(0)
        expect(mem.lastIndexOfAt(a, 0, b)).toBe(0)
    end)
    test("None (2)", function()
        local a = buffer.create(0)
        local b = buffer.fromstring(" ")
        expect(mem.lastIndexOfAt(a, 0, b)).toBe(nil)
    end)
    test("Single", function()
        local a = buffer.fromstring(" H")
        local b = buffer.fromstring("H")
        expect(mem.lastIndexOfAt(a, 0, b)).toBe(1)
    end)
    test("Large", function()
        local a = buffer.fromstring(string.rep("aB", 100) .. "Capped" .. string.rep("aB", 100) .. "Capped")
        local b = buffer.fromstring("Capped")
        expect(mem.lastIndexOfAt(a, 5, b)).toBe(406)
    end)
    test("Offset", function()
        local a = buffer.fromstring(" H  ")
        local b = buffer.fromstring("H")
        expect(mem.lastIndexOfAt(a, 1, b)).toBe(1)
    end)
    test("Different", function()
        local a = buffer.fromstring("Hollo  ")
        local b = buffer.fromstring("Hello")
        expect(mem.lastIndexOfAt(a, 6, b)).toBe(nil)
    end)
end)

-- lastIndexOfChar is based on lastIndexOfCharAt
describe("lastIndexOfCharAt", function()
    test("Example", function()
        local a = buffer.fromstring("Hat Hello Hat")
        expect(mem.lastIndexOfCharAt(a, 0, string.byte("H"))).toBe(10)
    end)
    test("None", function()
        local a = buffer.create(0)
        expect(mem.lastIndexOfCharAt(a, 0, 2)).toBe(nil)
    end)
    test("None (2)", function()
        local a = buffer.create(0)
        expect(mem.lastIndexOfCharAt(a, 0, string.byte(" "))).toBe(nil)
    end)
end)

describe("trim", function()
    test("Left", function()
        local a = buffer.fromstring("  Hat")
        local trim = buffer.fromstring(" ")
        local slice = mem.trimLeft(a, trim);
        expect(buffer.tostring(slice)).toBe("Hat")
    end)
    test("Right", function()
        local a = buffer.fromstring("Hat  ")
        local trim = buffer.fromstring(" ")
        local slice = mem.trimRight(a, trim);
        expect(buffer.tostring(slice)).toBe("Hat")
    end)
    test("All", function()
        local a = buffer.fromstring("  Hat  ")
        local trim = buffer.fromstring(" ")
        local slice = mem.trim(a, trim);
        expect(buffer.tostring(slice)).toBe("Hat")
    end)
    test("Multi Left", function()
        local a = buffer.fromstring("  AAAABBCCHat")
        local trim = buffer.fromstring(" ABC")
        local slice = mem.trimLeft(a, trim);
        expect(buffer.tostring(slice)).toBe("Hat")
    end)
    test("Multi Right", function()
        local a = buffer.fromstring("HatAAAABBCC  ")
        local trim = buffer.fromstring(" ABC")
        local slice = mem.trimRight(a, trim);
        expect(buffer.tostring(slice)).toBe("Hat")
    end)
    test("Multi All", function()
        local a = buffer.fromstring("  AAAABBCCHatAAAABBCC  ")
        local trim = buffer.fromstring(" ABC")
        local slice = mem.trim(a, trim);
        expect(buffer.tostring(slice)).toBe("Hat")
    end)
end)

return nil;
